{
  "tips": [
    "1. Preocupe-se com seu trabalho \nPor que passar sua vida desenvolvendo software se não estiver interessado em fazê-lo bem?",
    "2. Reflita sobre seu trabalho \nDesligue o piloto automático e assuma o controle. Critique e avalie constantemente seu trabalho.",
    "3. Forneça opções, não dê desculpas esfarrapadas \nEm vez de desculpas, forneça opções. Não diga que não pode ser feito; explique o que pode ser feito.",
    "4. Não tolere janelas quebradas \nCorrija projetos incorretos, decisões erradas e códigos frágeis quando os encontrar.",
    "5. Seja um catalisador da mudança \nVocê não pode impor mudanças às pessoas. Em vez disso, mostre a elas como o futuro pode ser e ajude-as a participar de sua criação.",
    "6. Lembre-se do cenário em larga escala  \nNão fique tão absorvido pelos detalhes a ponto de não ver o que está acontecendo ao seu redor.",
    "7. Torne a qualidade parte dos requisitos  \nEnvolva seus usuários na determinação dos requisitos de qualidade do projeto.",
    "8. Invista regularmente em sua carteira de conhecimentos  \nTorne o aprendizado um hábito.",
    "9. Analise criticamente o que você lê e ouve  \nNão se deixe levar por fornecedores, pela mídia ou por \ndogmas. Analise as informações em relação a si mesmo e ao seu projeto.",
    "10. É o que você diz e a maneira como diz  \nNão adianta ter grandes ideias se elas não forem divulgadas de modo eficaz.",
    "11. NSR – Não se repita  \nCada bloco de informações deve ter uma representação oficial, exclusiva e sem ambiguidades dentro de um sistema.",
    "12. Facilite a reutilização  \nSe for fácil reutilizar, será reutilizado. Crie um ambiente que apóie a reutilização.",
    "13. Elimine efeitos entre elementos não relacionados  \nProjete componentes que sejam autossuficientes, independentes e com uma finalidade exclusiva bem definida.",
    "14. Não há decisões definitivas  \nNenhuma decisão é irrevogável: planeje-se para a mu-\ndança.",
    "15. Use projéteis luminosos para encontrar o alvo  \nOs projéteis luminosos permitirão que você acerte seu alvo testando alterações e vendo o quanto elas chegam perto do objetivo.",
    "16. Crie protótipos para aprender  \nA criação de protótipos é uma experiência de aprendizado. Seu valor não está no código produzido, mas nas lições aprendidas.",
    "17. Programe em um nível próximo ao domínio do problema  \nProjete e codifique na linguagem do seu usuário.",
    "18. Estime para evitar surpresas  \nEstime antes de começar. Você identificará possíveis problemas logo de início.",
    "19. Reexamine o cronograma junto ao código  \nUse a experiência adquirida durante a implementação para aprimorar as escalas de tempo do projeto.",
    "20. Mantenha as informações em texto simples  \nO texto simples não ficará obsoleto. Ele ajuda a realçar seu trabalho e simplifica a depuração e o teste.",
    "21. Use o poder dos shells de comando  \nUse o shell quando as interfaces gráficas de usuário não ajudarem.",
    "22. Use um único editor bem  \nO editor deve ser uma extensão de suas mãos. Certifique-se de que seu editor seja configurável, extensível e programável.",
    "23. Use sempre o controle do código-fonte  \nO controle do código-fonte é a máquina do tempo de seu trabalho – ele o permite voltar.",
    "24. Corrija o problema, esqueça o culpado  \nNão importa se você ou outra pessoa foi o culpado pelo bug – ele precisará de correção de qualquer forma.",
    "25. Não entre em pânico  \nRespire fundo e reflita sobre o que pode ser a causa do bug.",
    "26. “select” não está com defeito  \nÉ raro encontrar um bug no sistema operacional, no compilador ou até mesmo em um produto ou biblioteca de terceiros. Quase sempre o bug está no aplicativo.",
    "27. Não suponha – teste  \n.Comprove suas suposições no ambiente real – com da- dos e condições limítrofes reais.",
    "28. Aprenda uma linguagem de manipulação de texto  \nVocê trabalha com texto todos os dias. Por que não dei- xar o computador fazer parte desse trabalho?.",
    "29. Escreva um código que crie códigos  \nOs geradores de código aumentam a produtividade e ajudam a evitar a duplicação.",
    "30. Você não conseguirá criar um software perfeito  \nO software não pode ser perfeito. Proteja seu código e os usuários de erros inevitáveis.",
    "31. Projete com contratos  \nUse contratos para documentar e provar que o código não faz mais nem menos do que ele alega fazer.",
    "32. Encerre antecipadamente  \nEm geral, um programa encerrado causa muito menos danos do que um funcionando mal.",
    "33. Se não pode acontecer, use asserções para assegurar que não aconteça  \nAs asserções validam as suposições. Use-as para proteger seu código de um mundo incerto.",
    "34. Use exceções para problemas excepcionais  \nAs exceções podem sofrer de todos os problemas de legibilidade e manutenção dos emaranhados de códigos clássicos. Guarde-as para acontecimentos excepcionais.",
    "35. Acabe o que começou  \nOnde possível, a rotina ou objeto que alocou um recurso deve ser responsável por sua desalocação..",
    "36. Reduza a vinculação entre módulos  \nEvite a vinculação escrevendo códigos “cautelosos” e aplicando a Lei de Deméter.",
    "37. Configure, não integre  \nImplemente as escolhas de tecnologia de um aplicativo como opções de configuração e não por meio de integração ou engenharia.",
    "38. Coloque as abstrações no código e os detalhes em metadados  \nPrograme visando o caso geral e deixe os detalhes específicos fora da base de código compilada.",
    "39. Analise o fluxo de trabalho para melhorar a concorrência  \nExplore a concorrência no fluxo de trabalho de seu usuário.",
    "40. Projete usando serviços   \nProjete em termos de serviços – objetos independentes e concorrentes por trás de interfaces consistentes e bem definidas.",
    "41. Projete sempre pensando na concorrência  \nEstimule a concorrência e projete interfaces mais simples com menos suposições.",
    "42. Separe as visualizações dos modelos  \nGanhe flexibilidade a baixo custo projetando seu aplicativo em termos de modelos e visualizações.",
    "43. Use quadros-negros para coordenar o fluxo de trabalho  \nUse quadros-negros para coordenar fatos e agentes diferentes e continuar mantendo a independência e o isolamento entre os participantes.",
    "44. Não programe por coincidência  \nConfie apenas em elementos confiáveis. Cuidado com a complexidade acidental e não confunda uma coincidência feliz com um plano intencional.",
    "45. Estime a ordem de seus algoritmos  \nTenha uma ideia de quanto o processo deve demorar antes de escrever o código.",
    "46. Teste suas estimativas  \nA análise matemática de algoritmos não diz tudo. Tente cronometrar seu código em seu ambiente de destino.",
    "47. Refatore cedo, refatore sempre  \nDa mesma forma que você pode capinar e reorganizar um jardim, reescreva, reorganize e reconstrua o código quando necessário. Ataque a raiz do problema.",
    "48. Projete para testar  \nComece a pensar no teste antes de escrever uma linha de código.",
    "49. Teste seu software ou seus usuários testarão  \nTeste incansavelmente. Não deixe que seus usuários encontrem erros para você.",
    "50. Não use um código de assistente que você não entender  \nAssistentes podem gerar muitas páginas de código. Verifique se o entendeu por completo antes de incorporá-lo em seu projeto.",
    "51. Não colete requisitos – cave-os  \nRaramente os requisitos estão na superfície. Eles ficam profundamente enterrados sob camadas de suposições, concepções erradas e política.",
    "52. Trabalhe com um usuário para pensar como um usuário  \nÉ a melhor maneira de entender como o sistema será usado de verdade.",
    "53. Abstrações têm vida mais longa do que detalhes  \nInvista na abstração e não na implementação. As abstrações podem sobreviver às diversas mudanças provenientes de diferentes implementações e novas tecnologias.",
    "54. Use um glossário do projeto  \nCrie e mantenha uma fonte exclusiva com todos os ter- mos e vocabulário específicos de um projeto.",
    "55. Não pense fora da caixa – encontre a caixa  \nQuando diante de um problema difícil, identifique todas as restrições reais. Faça a si próprio a pergunta: “Isso precisa ser feito assim? De fato, precisa ser feito?”.",
    "56. Só comece quando estiver pronto  \nVocê ganhou experiência durante toda a sua vida. Não ignore pequenas dúvidas.",
    "57. Algumas coisas são fáceis de fazer, mas não de descrever  \nNão caia na espiral das especificações – em algum mo- mento você terá de começar a codificar.",
    "58. Não seja escravo dos métodos formais  \nNão adote cegamente qualquer técnica sem trazê-la para o contexto de suas práticas e capacidades de desenvolvimento.",
    "59. Ferramentas caras não produzem projetos melhores   \nCuidado com a propaganda dos fornecedores, com dogmas da indústria e com o apelo da etiqueta de pre- ço. Julgue as ferramentas por seu mérito.",
    "60. Organize as equipes com base na funcionalidade  \nNão separe projetistas de codificadores, testadores de modeladores de dados. Construa equipes como constrói o código.",
    "61. Não use procedimentos manuais  \nUm script de shell ou um arquivo em lotes executará as mesmas instruções, na mesma ordem, repetidamente.",
    "62. Teste cedo. Teste sempre. Teste automaticamente  \nTestes executados a cada construção são muito mais eficazes do que planos de teste que ficam aguardando para ser usados.",
    "63. A codificação só estará concluída após todos os testes serem executados  \nNada a declarar..",
    "64. Use sabotadores para testar seus testes  \nIntroduza erros de propósito em uma cópia separada da fonte para verificar se os testes irão capturá-los.",
    "65. Teste a cobertura de estados e não a cobertura do código  \nIdentifique e teste estados significativos do programa. Testar apenas linhas de código não é suficiente.",
    "66. Encontre os erros apenas uma vez  \nQuando um testador humano encontrar um erro, essa deve ser a última vez que um testador humano o encontrará. Testes automáticos devem procurá-lo desse momento em diante.",
    "67. Trate o português simplesmente como outra linguagem de programação  \nEscreva documentos como você escreve códigos: obedeça o princípio NSR e use metadados, o MVC, a geração automática e assim por diante.",
    "68. Construa a documentação no código, não a acrescente como complemento  \nDocumentação criada separadamente do código tem menos probabilidades de estar correta e atualizada.",
    "69. Exceda gentilmente as expectativas de seus usuários  \nTente entender as expectativas de seus usuários e então entregue apenas um pouco mais.",
    "70. Assine seu trabalho  \nOs artesãos da antiguidade ficavam orgulhosos em as- sinar seu trabalho. Você também deve ficar.."
  ]
}

