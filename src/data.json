{
  "tips": [
    "Preocupe-se com seu trabalho: Por que passar sua vida desenvolvendo software se não estiver interessado em fazê-lo bem?",
    "Reflita sobre seu trabalho: Desligue o piloto automático e assuma o controle. Critique e avalie constantemente seu trabalho.",
    "Forneça opções, não dê desculpas esfarrapadas: Em vez de desculpas, forneça opções. Não diga que não pode ser feito; explique o que pode ser feito.",
    "Não tolere janelas quebradas: Corrija projetos incorretos, decisões erradas e códigos frágeis quando os encontrar.",
    "Seja um catalisador da mudança: Você não pode impor mudanças às pessoas. Em vez disso, mostre a elas como o futuro pode ser e ajude-as a participar de sua criação.",
    "Lembre-se do cenário em larga escala: Não fique tão absorvido pelos detalhes a ponto de não ver o que está acontecendo ao seu redor.",
    "Torne a qualidade parte dos requisitos: Envolva seus usuários na determinação dos requisitos de qualidade do projeto.",
    "Invista regularmente em sua carteira de conhecimentos: Torne o aprendizado um hábito.",
    "Analise criticamente o que você lê e ouve: Não se deixe levar por fornecedores, pela mídia ou por: dogmas. Analise as informações em relação a si mesmo e ao seu projeto.",
    "É o que você diz e a maneira como diz: Não adianta ter grandes ideias se elas não forem divulgadas de modo eficaz.",
    "NSR – Não se repita: Cada bloco de informações deve ter uma representação oficial, exclusiva e sem ambiguidades dentro de um sistema.",
    "Facilite a reutilização: Se for fácil reutilizar, será reutilizado. Crie um ambiente que apoie a reutilização.",
    "Elimine efeitos entre elementos não relacionados: Projete componentes que sejam autossuficientes, independentes e com uma finalidade exclusiva bem definida.",
    "Não há decisões definitivas: Nenhuma decisão é irrevogável: planeje-se para a mu-\ndança.",
    "Use projéteis luminosos para encontrar o alvo: Os projéteis luminosos permitirão que você acerte seu alvo testando alterações e vendo o quanto elas chegam perto do objetivo.",
    "Crie protótipos para aprender: A criação de protótipos é uma experiência de aprendizado. Seu valor não está no código produzido, mas nas lições aprendidas.",
    "Programe em um nível próximo ao domínio do problema: Projete e codifique na linguagem do seu usuário.",
    "Estime para evitar surpresas: Estime antes de começar. Você identificará possíveis problemas logo de início.",
    "Reexamine o cronograma junto ao código: Use a experiência adquirida durante a implementação para aprimorar as escalas de tempo do projeto.",
    "Mantenha as informações em texto simples: O texto simples não ficará obsoleto. Ele ajuda a realçar seu trabalho e simplifica a depuração e o teste.",
    "Use o poder dos shells de comando: Use o shell quando as interfaces gráficas de usuário não ajudarem.",
    "Use um único editor bem: O editor deve ser uma extensão de suas mãos. Certifique-se de que seu editor seja configurável, extensível e programável.",
    "Use sempre o controle do código-fonte: O controle do código-fonte é a máquina do tempo de seu trabalho – ele o permite voltar.",
    "Corrija o problema, esqueça o culpado: Não importa se você ou outra pessoa foi o culpado pelo bug – ele precisará de correção de qualquer forma.",
    "Não entre em pânico: Respire fundo e reflita sobre o que pode ser a causa do bug.",
    "“select” não está com defeito: É raro encontrar um bug no sistema operacional, no compilador ou até mesmo em um produto ou biblioteca de terceiros. Quase sempre o bug está no aplicativo.",
    "Não suponha – teste: .Comprove suas suposições no ambiente real – com dados e condições limítrofes reais.",
    "Aprenda uma linguagem de manipulação de texto: Você trabalha com texto todos os dias. Por que não deixar o computador fazer parte desse trabalho?.",
    "Escreva um código que crie códigos: Os geradores de código aumentam a produtividade e ajudam a evitar a duplicação.",
    "Você não conseguirá criar um software perfeito: O software não pode ser perfeito. Proteja seu código e os usuários de erros inevitáveis.",
    "Projete com contratos: Use contratos para documentar e provar que o código não faz mais nem menos do que ele alega fazer.",
    "Encerre antecipadamente: Em geral, um programa encerrado causa muito menos danos do que um funcionando mal.",
    "Se não pode acontecer, use asserções para assegurar que não aconteça: As asserções validam as suposições. Use-as para proteger seu código de um mundo incerto.",
    "Use exceções para problemas excepcionais: As exceções podem sofrer de todos os problemas de legibilidade e manutenção dos emaranhados de códigos clássicos. Guarde-as para acontecimentos excepcionais.",
    "Acabe o que começou: Onde possível, a rotina ou objeto que alocou um recurso deve ser responsável por sua desalocação..",
    "Reduza a vinculação entre módulos: Evite a vinculação escrevendo códigos “cautelosos” e aplicando a Lei de Deméter.",
    "Configure, não integre: Implemente as escolhas de tecnologia de um aplicativo como opções de configuração e não por meio de integração ou engenharia.",
    "Coloque as abstrações no código e os detalhes em metadados: Programe visando o caso geral e deixe os detalhes específicos fora da base de código compilada.",
    "Analise o fluxo de trabalho para melhorar a concorrência: Explore a concorrência no fluxo de trabalho de seu usuário.",
    "Projete usando serviços: Projete em termos de serviços – objetos independentes e concorrentes por trás de interfaces consistentes e bem definidas.",
    "Projete sempre pensando na concorrência: Estimule a concorrência e projete interfaces mais simples com menos suposições.",
    "Separe as visualizações dos modelos: Ganhe flexibilidade a baixo custo projetando seu aplicativo em termos de modelos e visualizações.",
    "Use quadros-negros para coordenar o fluxo de trabalho: Use quadros-negros para coordenar fatos e agentes diferentes e continuar mantendo a independência e o isolamento entre os participantes.",
    "Não programe por coincidência: Confie apenas em elementos confiáveis. Cuidado com a complexidade acidental e não confunda uma coincidência feliz com um plano intencional.",
    "Estime a ordem de seus algoritmos: Tenha uma ideia de quanto o processo deve demorar antes de escrever o código.",
    "Teste suas estimativas: A análise matemática de algoritmos não diz tudo. Tente cronometrar seu código em seu ambiente de destino.",
    "Refatore cedo, refatore sempre: Da mesma forma que você pode capinar e reorganizar um jardim, reescreva, reorganize e reconstrua o código quando necessário. Ataque a raiz do problema.",
    "Projete para testar: Comece a pensar no teste antes de escrever uma linha de código.",
    "Teste seu software ou seus usuários testarão: Teste incansavelmente. Não deixe que seus usuários encontrem erros para você.",
    "Não use um código de assistente que você não entender: Assistentes podem gerar muitas páginas de código. Verifique se o entendeu por completo antes de incorporá-lo em seu projeto.",
    "Não colete requisitos – cave-os: Raramente os requisitos estão na superfície. Eles ficam profundamente enterrados sob camadas de suposições, concepções erradas e política.",
    "Trabalhe com um usuário para pensar como um usuário: É a melhor maneira de entender como o sistema será usado de verdade.",
    "Abstrações têm vida mais longa do que detalhes: Invista na abstração e não na implementação. As abstrações podem sobreviver às diversas mudanças provenientes de diferentes implementações e novas tecnologias.",
    "Use um glossário do projeto: Crie e mantenha uma fonte exclusiva com todos os termos e vocabulário específicos de um projeto.",
    "Não pense fora da caixa – encontre a caixa: Quando diante de um problema difícil, identifique todas as restrições reais. Faça a si próprio a pergunta: “Isso precisa ser feito assim? De fato, precisa ser feito?”.",
    "Só comece quando estiver pronto: Você ganhou experiência durante toda a sua vida. Não ignore pequenas dúvidas.",
    "Algumas coisas são fáceis de fazer, mas não de descrever: Não caia na espiral das especificações – em algum mo- mento você terá de começar a codificar.",
    "Não seja escravo dos métodos formais: Não adote cegamente qualquer técnica sem trazê-la para o contexto de suas práticas e capacidades de desenvolvimento.",
    "Ferramentas caras não produzem projetos melhores: Cuidado com a propaganda dos fornecedores, com dogmas da indústria e com o apelo da etiqueta de pre- ço. Julgue as ferramentas por seu mérito.",
    "Organize as equipes com base na funcionalidade: Não separe projetistas de codificadores, testadores de modeladores de dados. Construa equipes como constrói o código.",
    "Não use procedimentos manuais: Um script de shell ou um arquivo em lotes executará as mesmas instruções, na mesma ordem, repetidamente.",
    "Teste cedo. Teste sempre. Teste automaticamente: Testes executados a cada construção são muito mais eficazes do que planos de teste que ficam aguardando para ser usados.",
    "A codificação só estará concluída após todos os testes serem executados: Nada a declarar..",
    "Use sabotadores para testar seus testes: Introduza erros de propósito em uma cópia separada da fonte para verificar se os testes irão capturá-los.",
    "Teste a cobertura de estados e não a cobertura do código: Identifique e teste estados significativos do programa. Testar apenas linhas de código não é suficiente.",
    "Encontre os erros apenas uma vez: Quando um testador humano encontrar um erro, essa deve ser a última vez que um testador humano o encontrará. Testes automáticos devem procurá-lo desse momento em diante.",
    "Trate o português simplesmente como outra linguagem de programação: Escreva documentos como você escreve códigos: obedeça o princípio NSR e use metadados, o MVC, a geração automática e assim por diante.",
    "Construa a documentação no código, não a acrescente como complemento: Documentação criada separadamente do código tem menos probabilidades de estar correta e atualizada.",
    "Exceda gentilmente as expectativas de seus usuários: Tente entender as expectativas de seus usuários e então entregue apenas um pouco mais.",
    "Assine seu trabalho: Os artesãos da antiguidade ficavam orgulhosos em assinar seu trabalho. Você também deve ficar.."
  ]
}

